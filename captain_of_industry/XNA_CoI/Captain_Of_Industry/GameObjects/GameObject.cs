using System;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;

namespace Captain_Of_Industry
{
    public enum OBJECT_TYPE
    {
        PLAYER,
        NPC,
        STORE,
        DUMPSTER,
        STATIC
    };

    public abstract class GameObject
    {
        // Name for this type
        private string name;
        // Unique int ID, generated by factory
        private int ID;
        // Store the type of object
        private OBJECT_TYPE type;
        // World position of this object
        public Vector2 position;
        // Will other objects collide with this one?
	    public bool isCollidable;
        // Store the tile type this object is located on
        protected TILE_TYPE currentlyOn;

        public GameObject(OBJECT_TYPE _type)
        {
            ID = ObjectFactory.GetID();
            type = _type; 
        }
        // Override to draw appropriate visuals to screen (based on animation or texture)
        public virtual void Draw(SpriteBatch _spriteBatch) { }
        // Override to increment necessary elements on game update call
        public virtual void Update(GameTime gameTime) { }
        // Override for collision checks
        public abstract void OnHit(GameObject _obj);
        // Override to get the width of the animation or texture
        public abstract int GetWidth();
        // Override to get the height of the animation or texture
        public abstract int GetHeight();
        // Get the ID
        public int GetID() { return ID; }

        // Check this distance between this object and the target object
        public float CheckDistance(GameObject _target)
        {
            Vector2 temp = position - _target.position;
            return temp.Length();
        }
        // Set/Get name of object
        public void SetName(string _name) { name = _name; }
        public string GetName() { return name; }
        // Get the object type
        public OBJECT_TYPE GetEntityType() { return type; }
        // Return the tile type this object is on
        public TILE_TYPE GetTileType() { return currentlyOn; }
        // Set the tile type this object is standing on
        public void SetTileType(TILE_TYPE _type) { currentlyOn = _type; }
    }
}
